<%- contentFor('HeaderCss') %>

<style>
  html,
  body {
    height: 100%;
    margin: 0;
    padding: 0;
  }
  #gantt_here {
    width: 100%;
    height: 600px;
  }
  /* ✅ Default phase (parent) bars will remain blue */
  .gantt_task_line {
    background-color: #007bff; /* Default blue for phases */
  }

  /* ✅ Custom colors for projects */
  .green .gantt_task_content {
    background-color: #28a745 !important;
    color: white;
  }

  .yellow .gantt_task_content {
    background-color: #ffc107 !important;
    color: black;
  }

  .red .gantt_task_content {
    background-color: #dc3545 !important;
    color: white;
  }
</style>

<%- contentFor('breadcrumb') %>
<div class="row">
  <div class="col-md-4">
    <button type="button" class="button-menu-mobile open-left waves-effect">
      <i class="ion-navicon"></i>
    </button>
    <h3 class="page-title">Flight Plan</h3>
  </div>
  <% include ../Partials/portfolio_name %>
  <div class="col-md-4 text-right">
    <!-- Add any additional content here -->
  </div>
</div>

<%- contentFor('body') %>
<div class="page-content-wrapper">
  <div class="container-fluid">
    <div class="row mb-3">
      <div class="col-md-6">
        <button
          type="button"
          class="btn btn-primary waves-effect waves-light"
          id="btnExportFlightPlan"
        >
          Export Flight Plan Data
        </button>
      </div>
    </div>
    <div id="gantt_here" style="width: 1200px; height: 400px"></div>
  </div>
</div>

<%- contentFor('FooterJs') %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    let tasks = []; // Store tasks data for export

    // Fetch project data from your API
    fetch("/projects/flightview/ganttChart/")
      .then((response) => response.json())
      .then((pData) => {
        const projects = pData.companyProjects;

        const phaseMapping = {
          2: { id: 2, text: "Planning", open: true, type: "phase" },
          3: { id: 3, text: "Discovery", open: true, type: "phase" },
          4: { id: 4, text: "Delivery", open: true, type: "phase" },
        };

        const categories = Object.values(phaseMapping);

        const filteredProjects = projects.filter(
          (project) =>
            project.phase_id_fk === 2 ||
            project.phase_id_fk === 3 ||
            project.phase_id_fk === 4,
        );

        const colorMapping = {
          Green: "Healthy",
          Yellow: "Caution",
          Red: "Danger",
          Black: "Unknown", // Default for #000000 or undefined health
        };

        tasks = {
          data: filteredProjects.map((project) => {
            console.log("Raw Start Date:", project.start_date); // Debugging
            console.log("Raw End Date:", project.end_date); // Debugging

            const phaseId = phaseMapping[project.phase_id_fk]?.id;

            // Format dates to yyyy-dd-mm
            const formatDate = (date) => {
              if (!date) return "N/A"; // Handle null or undefined dates

              // Use moment to parse and format the date
              const formattedDate = moment(date, moment.ISO_8601, true).format(
                "YYYY-MM-DD",
              );
              if (!formattedDate || formattedDate === "Invalid date") {
                console.error("Invalid date:", date); // Log invalid dates for debugging
                return "N/A"; // Return "N/A" for invalid dates
              }

              return formattedDate;
            };

            tasks = {
              data: filteredProjects.map((project) => {
                console.log("RAW Start Date:", project.start_date); // Debugging
                console.log("RAW End Date:", project.end_date); // Debugging

                const phaseId = phaseMapping[project.phase_id_fk]?.id;

                return {
                  id: project.id + 1000,
                  text: project.project_name,
                  start_date: project.start_date
                    ? formatDate(project.start_date)
                    : "N/A",
                  end_date: project.end_date
                    ? formatDate(project.end_date)
                    : "N/A",
                  parent: phaseId || null,
                  health: colorMapping[project.health] || "Unknown", // Use color name instead of color code
                  type: "task",
                };
              }),
              links: [],
            };
            return {
              id: project.id + 1000,
              text: project.project_name,
              start_date: project.start_date
                ? formatDate(project.start_date)
                : "N/A",
              parent: phaseId || null,
              health: colorMapping[project.health] || "Unknown", // Use color name instead of color code
              type: "task",
            };
          }),
          links: [],
        };

        const sortedData = [...categories, ...tasks.data].sort((a, b) =>
          a.id === 2 ? -1 : 1,
        );
        gantt.config.columns = [
          {
            name: "text",
            label: "Project",
            width: "*",
            tree: true,
            width: 200,
          },
          {
            name: "start_date",
            label: "Start Date",
            align: "center",
            width: 120,
          }, // Update label here
          {
            name: "duration",
            label: "Duration (Days)",
            align: "center",
            width: 110,
          },
        ];
        gantt.config.readonly = true; // Make the Gantt chart read-only
        gantt.init("gantt_here");
        gantt.parse({ data: sortedData });

        gantt.templates.task_class = function (start, end, task) {
          if (task.type === "phase") return "";

          if (task.health && typeof task.health === "string") {
            return task.health.toLowerCase();
          }

          return "";
        };
      });
  });
</script>

<%- contentFor('BottomJs') %>
