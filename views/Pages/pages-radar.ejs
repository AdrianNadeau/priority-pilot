<%- contentFor('HeaderCss') %>
<style>
  .dashboard-container {
    width: 75%;
    margin: 0 auto; /* Center the container */
  }
  .chart-container {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
  }
  .chart {
    flex: 1;
    margin: 10px;
  }
  /* Add hover-over pointer effect for pie charts */
  #pieChart,
  #tag1Chart,
  #tag2Chart,
  #tag3Chart {
    cursor: pointer;
  }
  @media print {
    /* Hide buttons and other unnecessary elements */
    #btnPrintPage,
    #btnExportHealth,
    .page-title,
    .portfolio-title,
    .button-menu-mobile {
      display: none;
    }

    /* Ensure the table and charts fit within the page */
    .table-responsive {
      overflow: visible !important;
    }

    .page-content-wrapper {
      margin: 0;
      padding: 0;
    }

    /* Adjust font sizes for better readability */
    body {
      font-size: 12px;
    }
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<%- contentFor('breadcrumb') %>
<div class="row">
  <div class="col-md-4">
    <button type="button" class="button-menu-mobile open-left waves-effect">
      <i class="ion-navicon"></i>
    </button>
    <h3 class="page-title">Radar</h3>
    <button
      type="button"
      class="btn btn-primary waves-effect waves-light"
      id="btnPrintPage"
    >
      Download Report
    </button>
  </div>
  <div class="col-md-4">
    <h3
      class="page-title portfolio-title"
      style="color: #34b871; min-width: 600px"
    >
      <%= portfolio_name %>
    </h3>
  </div>
  <div class="col-md-4 text-right">
    <!-- Add any additional content here -->
  </div>
</div>

<%- contentFor('body') %>

<div class="page-content-wrapper">
  <div class="container" style="margin-left: 0.5em">
    <div class="row">
      <div class="col-lg-7">
        <div class="row mt-5">
          <div class="col-lg-6 text-center">
            <div
              id="columnchart_values"
              style="width: 100%; height: 300px"
            ></div>
          </div>
          <div class="col-lg-6 text-center">
            <div
              id="columnChartCost_values"
              style="width: 100%; height: 300px"
            ></div>
          </div>
          <div class="col-lg-10 text-center">
            <canvas id="barChart" width="400" height="200"></canvas>
          </div>
        </div>
      </div>

      <div class="col-lg-4">
        <div class="row mt-5 text-center">
          <div id="pieChart"></div>
        </div>
        <div class="row">
          <div class="col-lg-6"></div>
        </div>
        <div class="row mt-5 text-center" style="margin-top: 0rem !important">
          <div id="tag1Chart"></div>
          <span id="tag1NoTags" name="tag1NoTags" class="text-center"></span>
        </div>
        <div class="row mt-5" style="margin-top: 0rem !important">
          <div id="tag2Chart"></div>
          <span id="tag2NoTags" name="tag2NoTags" class="text-center"></span>
        </div>
        <div class="row mt-5" style="margin-top: 0rem !important">
          <div id="tag3Chart"></div>
          <span id="tag3NoTags" name="tag3NoTags" class="text-center"></span>
        </div>
      </div>
    </div>
  </div>
</div>

<%- contentFor('FooterJs') %> <%- contentFor('BottomJs') %>

<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function() {
      const portfolioTitle = document.getElementById("portfolioTitle");
      console.error("DRAW!");
      const barCtx = document.getElementById("barChart")?.getContext("2d");
      if (!barCtx) {
        console.error("Canvas element with ID 'barChart' not found!");
        return;
      }

      function parseFormattedCost(cost) {
        if (typeof cost === "string") {
          if (cost.endsWith("K")) {
            return parseFloat(cost.replace("K", "")) * 1000;
          } else if (cost.endsWith("M")) {
            return parseFloat(cost.replace("M", "")) * 1000000;
          }
        }
        return parseFloat(cost);
      }

      google.charts.load('current', { packages: ['corechart'] });
      google.charts.setOnLoadCallback(drawCharts);

      function drawCharts() {
        // Draw all charts
        drawProgressBarChart();
        drawProjectsByPhaseChart();
        drawCostByPhaseChart();
        drawTagCharts();
      }

      function drawProgressBarChart() {
        // ---------------------------------------------
        // 1) Progress Data & Bar Chart
        // ---------------------------------------------
        fetch(`/projects/radar/progress`)
          .then((response) => response.json())
          .then((progressData) => {
            console.log("Progress Headline:", progressData);
            if (
              progressData &&
              progressData.progress &&
              Array.isArray(progressData.progress)
            ) {
              const colorMapping = {
                Green: "#28a745",
                Yellow: "#ffc107",
                Red: "#dc3545",
              };

              const validProgressData = progressData.progress.filter(
                (_, i) => progressData.colors[i].trim() !== "No status available"
              );
              const validColors = progressData.colors.filter(
                (color) => color.trim() !== "No status available"
              );
              const validProjectNames = progressData.project_names.filter(
                (_, i) => progressData.colors[i].trim() !== "No status available"
              );
              const mappedColors = validColors.map(
                (color) => colorMapping[color.trim()] || "#000000"
              );

              const barCtx = document.getElementById("barChart")?.getContext("2d");
              console.log(barCtx); // Should log the 2D context or `null` if not found
              new Chart(barCtx, {
                type: "bar",
                data: {
                  labels: validProjectNames,
                  datasets: [{
                    label: "",
                    data: validProgressData,
                    backgroundColor: mappedColors,
                    borderWidth: 1,
                  }],
                },
                options: {
                  scales: {
                    y: {
                      beginAtZero: true,
                      max: 100,
                      ticks: { stepSize: 10 },
                      title: {
                        display: true,
                        text: "Progress (%)",
                      },
                    },
                  },
                  plugins: {
                    title: { display: false },
                    legend: { display: false },
                    tooltip: {
                      callbacks: {
                        label: (tooltipItem) =>
                          `Progress: ${Math.round(validProgressData[tooltipItem.dataIndex])}%`,
                      },
                    },
                    datalabels: {
                      anchor: "end",
                      align: "end",
                      formatter: (value) => Math.round(value) + "%",
                      color: "#000",
                      font: { weight: "bold" },
                    },
                  },
                },
                plugins: [ChartDataLabels],
              });

              // ---------------------------------------------
              // 2) Portfolio Health Pie Chart
              // ---------------------------------------------
              const colorCounts = { Green: 0, Yellow: 0, Red: 0 };
              validColors.forEach((color) => {
                if (colorCounts[color.trim()] !== undefined) {
                  colorCounts[color.trim()] += 1;
                }
              });

              const labels = Object.keys(colorCounts);
              const counts = Object.values(colorCounts);
              const chartColors = ["#28a745", "#ffc107", "#dc3545"];
              const total = counts.reduce((sum, count) => sum + count, 0);
              const percentages = counts.map((count) =>
                Math.round((count / total) * 100)
              );
              const customLabels = ["Healthy", "Caution", "In Trouble"];

              const chartDataArray = [
                ["Status", "Count", { role: "tooltip", p: { html: false } }],
              ];
              labels.forEach((label, i) => {
                chartDataArray.push([
                  customLabels[i],
                  { v: counts[i], f: percentages[i] + "%" },
                  `${customLabels[i]}\n${counts[i]} (${percentages[i]}%)`,
                ]);
              });

              const data = google.visualization.arrayToDataTable(chartDataArray);
              const options = {
                title: "Portfolio Health",
                pieHole: 0.4,
                backgroundColor: "transparent",
                width: 600,
                height: 400,
                colors: chartColors,
                legend: {
                  position: "right",
                  textStyle: { color: "#333", fontSize: 14 },
                },
                pieSliceText: "value",
                tooltip: { isHtml: false },
              };

              const pieChart = new google.visualization.PieChart(
                document.getElementById("pieChart")
              );
              pieChart.draw(data, options);
            } else {
              console.error("Expected an array but got:", progressData);
            }
          })
          .catch((err) => console.error(err));
      }

      function drawProjectsByPhaseChart() {
        // ---------------------------------------------
        // 4) Static Projects by Phase Column Chart
        // ---------------------------------------------
        const data = google.visualization.arrayToDataTable([
          ["Element", "Projects", { role: "style" }],
          ["Funnel", <%= pitchCount %>, "blue"],
          ["Planning", <%= priorityCount %>, "blue"],
          ["Discovery", <%= discoveryCount %>, "blue"],
          ["Delivery", <%= deliveryCount %>, "blue"],
          ["Done", <%= operationsCount %>, "blue"],
        ]);

        const view = new google.visualization.DataView(data);
        view.setColumns([
          0, 1,
          {
            calc: "stringify",
            sourceColumn: 1,
            type: "string",
            role: "annotation",
          },
          2,
        ]);

        const options = {
          title: "Projects by Phase",
          width: 400,
          height: 200,
          bar: { groupWidth: "95%" },
          legend: { position: "none" },
          backgroundColor: "transparent",
          textStyle: { fontSize: 40 },
        };

        const chart = new google.visualization.ColumnChart(
          document.getElementById("columnchart_values")
        );
        chart.draw(view, options);
      }

      function drawCostByPhaseChart() {
        // ---------------------------------------------
        // 5) Estimated Cost by Phase Column Chart
        // ---------------------------------------------
        var costData = google.visualization.arrayToDataTable([
          ["Element", "Cost", { role: "style" }],
          ["Funnel", parseFormattedCost("<%= pitchCost %>"), "green"],
          ["Planning", parseFormattedCost("<%= priorityCost %>"), "green"],
          ["Discovery", parseFormattedCost("<%= discoveryCost %>"), "green"],
          ["Delivery", parseFormattedCost("<%= deliveryCost %>"), "green"],
          ["Done", parseFormattedCost("<%= operationsTotalCost %>"), "green"],
        ]);

        var costView = new google.visualization.DataView(costData);
        costView.setColumns([
          0,
          1,
          {
            calc: "stringify",
            sourceColumn: 1,
            type: "string",
            role: "annotation",
          },
          2,
        ]);

        var costOptions = {
          title: "Estimated Cost by Phase",
          width: 400,
          height: 200,
          bar: { groupWidth: "95%" },
          legend: { position: "none" },
          backgroundColor: "transparent",
          textStyle: {
            fontSize: 40,
          },
        };
        var costChart = new google.visualization.ColumnChart(
          document.getElementById("columnChartCost_values")
        );
        costChart.draw(costView, costOptions);
      }

      function drawTagCharts() {
        // Tag 1 Chart
        fetch(`/projects/radar/countProjectsByTag1`)
          .then((response) => response.json())
          .then((tagsData) => {
            if (!tagsData || tagsData.length === 0) {
              document.getElementById("tag1NoTags").innerText =
                "No data found for tag 1";
              return;
            }

            console.log("Tag 1 Data:", tagsData); // Debugging log

            const chartData = [["Tag", "Count"]];
            tagsData.forEach((tag) => {
              if (tag.tag_name && tag.project_count > 0) {
                chartData.push([tag.tag_name, parseInt(tag.project_count)]);
              }
            });

            const data = google.visualization.arrayToDataTable(chartData);

            const options = {
              title: "Projects by Tag 1",
              pieHole: 0.4,
              backgroundColor: "transparent",
              width: 600,
              height: 400,
            };

            const chart = new google.visualization.PieChart(
              document.getElementById("tag1Chart")
            );
            chart.draw(data, options);
          })
          .catch((err) => console.error("Error loading Tag 1 Chart:", err));

        // Tag 2 Chart
        fetch(`/projects/radar/countProjectsByTag2`)
          .then((response) => response.json())
          .then((tagsData) => {
            console.log("Tag 2 Data:", tagsData); // Debugging log
            if (!tagsData || tagsData.length === 0) {
              document.getElementById("tag2NoTags").innerText =
                "No data found for tag 2";
              return;
            }

            const chartData = [["Tag", "Count"]];
            tagsData.forEach((tag) => {
              if (tag.tag_name && tag.project_count > 0) {
                chartData.push([tag.tag_name, parseInt(tag.project_count)]);
              }
            });

            const data = google.visualization.arrayToDataTable(chartData);

            const options = {
              title: "Projects by Tag 2",
              pieHole: 0.4,
              backgroundColor: "transparent",
              width: 600,
              height: 400,
            };

            const chart = new google.visualization.PieChart(
              document.getElementById("tag2Chart")
            );
            chart.draw(data, options);
          })
          .catch((err) => console.error("Error loading Tag 2 Chart:", err));

        // Tag 3 Chart
        fetch(`/projects/radar/countProjectsByTag3`)
          .then((response) => response.json())
          .then((tagsData) => {
            if (!tagsData || tagsData.length === 0) {
              document.getElementById("tag3NoTags").innerText =
                "No data found for tag 3";
              return;
            }

            const chartData = [["Tag 3", "Percentage"]];
            let total = 0;

            tagsData.forEach((tag) => {
              if (tag.tag_name !== null && parseInt(tag.project_count) > 0) {
                const count = parseInt(tag.project_count);
                chartData.push([tag.tag_name, count]);
                total += count;
              }
            });

            const roundedChartData = chartData.slice(1).map((row) => {
              const roundedValue = Math.round((row[1] / total) * 100);
              const tooltipText = row[0] + "\n" + roundedValue + "%";
              return [
                row[0],
                { v: roundedValue, f: `${roundedValue}%` },
                tooltipText,
              ];
            });

            const formattedData = [
              ["Tag 3", "Percentage", { role: "tooltip", p: { html: false } }],
              ...roundedChartData,
            ];

            const data = google.visualization.arrayToDataTable(formattedData);

            const options = {
              title: "Projects by Tag 3",
              pieHole: 0.4,
              backgroundColor: "transparent",
              width: 600,
              height: 400,
              tooltip: { text: "value" },
              pieSliceText: "value",
            };

            const chart = new google.visualization.PieChart(
              document.getElementById("tag3Chart")
            );
            chart.draw(data, options);
          })
          .catch((err) => console.error(err));
      }
    });
    document.getElementById("btnPrintPage").addEventListener("click", function () {
    const portfolioTitleElement = document.querySelector(".portfolio-title");

    if (!portfolioTitleElement) {
      console.error("Portfolio title element not found!");
      return;
    }

    const portfolioName = portfolioTitleElement.textContent.trim();

    // Create a style element for the print header
    const style = document.createElement("style");
    style.setAttribute("type", "text/css");
    style.setAttribute("media", "print");

    // Add CSS for the print header
    const css = `
    @page {
      size: landscape; /* Set page orientation to landscape */
      margin-top: 3cm; /* Adjust top margin to make space for the header */
    }
    body::before {
      content: "${portfolioName}";
      display: block;
      text-align: center; /* Center the header */
      font-weight: bold;
      font-size: 1.5em;
      margin-bottom: 1cm; /* Add space between the header and content */
    }
    #btnPrintPage,
    .button-menu-mobile,
    .page-title,
    .portfolio-title {
      display: none !important; /* Hide these elements during print */
    }
  `;

    style.appendChild(document.createTextNode(css));
    document.head.appendChild(style);

    // Trigger the print dialog
    window.print();

    // Remove the style element after printing
    setTimeout(() => {
      document.head.removeChild(style);
    }, 100); // Short delay to ensure the print dialog is handled
  });
</script>
