<%- contentFor('HeaderCss') %>
<style>
  .dashboard-container {
    width: 75%;
    margin: 0 auto; /* Center the container */
  }
  .chart-container {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
  }
  .chart {
    flex: 1;
    margin: 10px;
  }
</style>
<script
  type="text/javascript"
  src="https://www.gstatic.com/charts/loader.js"
></script>
<%- contentFor('breadcrumb') %>
<ul class="list-inline menu-left mb-0">
  <li class="list-inline-item">
    <button type="button" class="button-menu-mobile open-left waves-effect">
      <i class="ion-navicon"></i>
    </button>
  </li>
  <li class="hide-phone list-inline-item app-search">
    <h3 class="page-title">Radar</h3>
  </li>
</ul>

<%- contentFor('body') %>
<div class="page-content-wrapper">
  <div class="container" style="margin-left: 0.5em">
    <div class="row">
      <div class="col-lg-8">
        <div class="row">
          <div class="col-lg-2 text-center">
            <div class="card-body p-2">
              <strong class="h3">Funnel</strong>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                <%= pitchCount%>
              </button>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                $<%= pitchCost %>
              </button>
            </div>
          </div>
          <div class="col-lg-2 text-center">
            <div class="card-body p-2">
              <strong class="h3">Planning</strong>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                <%= priorityCount %>
              </button>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                $<%= priorityCost %>
              </button>
            </div>
          </div>
          <div class="col-lg-2 text-center">
            <div class="card-body p-2">
              <strong class="h3">Discovery</strong>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                <%= discoveryCount %>
              </button>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                $<%= discoveryCost %>
              </button>
            </div>
          </div>
          <div class="col-lg-2 text-center">
            <div class="card-body p-2">
              <strong class="h3">Delivery</strong>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                <%= deliveryCount %>
              </button>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                $<%= deliveryCost %>
              </button>
            </div>
          </div>
          <div class="col-lg-2 text-center">
            <div class="card-body p-2">
              <strong class="h3">Done</strong>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                <%= operationsCount %>
              </button>
              <br />
              <button
                type="button"
                class="btn btn-light"
                style="
                  background-color: #e2e6ea;
                  border-color: #e2e6ea;
                  margin-bottom: 5px;
                  width: 120px;
                  height: 50px;
                "
              >
                $<%= operationsTotalCost %>
              </button>
            </div>
          </div>
        </div>
        <div class="row mt-5">
          <div class="col-lg-10 text-center">
            <canvas id="barChart"></canvas>
          </div>
        </div>
      </div>

      <div class="col-lg-2">
        <div class="row">
          <!-- <canvas id="pieChart1"></canvas> -->
          <div id="pieChart"></div>
        </div>
        <div class="row mt-5" class="text-center">
          <div id="tag1Chart"></div>
          <span id="tag1NoTags" name="tag1NoTags" class="text-center"></span>
        </div>
        <div class="row mt-5">
          <div id="tag2Chart"></div>
          <span id="tag2NoTags" name="tag2NoTags" class="text-center"></span>
        </div>
        <div class="row mt-5">
          <div id="tag3Chart"></div>
          <span id="tag3NoTags" name="tag3NoTags" class="text-center"></span>
        </div>
      </div>
    </div>
  </div>
</div>

<%- contentFor('FooterJs') %> <%- contentFor('BottomJs') %>
<script>
  function getRandomColorForTags() {
    const letters = "0123456789ABCDEF";
    let color = "#";
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }
</script>
<script type="text/javascript">
  google.charts.load("current", { packages: ["corechart"] });
  google.charts.setOnLoadCallback(drawCharts);

  function drawCharts() {
    fetch(`/projects/radar/progress`)
      .then((response) => response.json())
      .then((progressData) => {
        console.log("Progress:", progressData);
        if (
          progressData &&
          progressData.progress &&
          Array.isArray(progressData.progress)
        ) {
          const colorMapping = {
            Green: "#28a745",
            Yellow: "#ffc107",
            Red: "#dc3545",
          };

          // Filter out "No status available" entries
          const validProgressData = progressData.progress.filter(
            (_, index) =>
              progressData.colors[index].trim() !== "No status available",
          );
          const validColors = progressData.colors.filter(
            (color) => color.trim() !== "No status available",
          );
          const validProjectNames = progressData.project_names.filter(
            (_, index) =>
              progressData.colors[index].trim() !== "No status available",
          );

          // Convert API colors to hex codes
          const mappedColors = validColors.map(
            (color) => colorMapping[color.trim()] || "#000000",
          );

          // Draw Bar Chart
          const barCtx = document.getElementById("barChart").getContext("2d");
          new Chart(barCtx, {
            type: "bar",
            data: {
              labels: validProjectNames,
              datasets: [
                {
                  label: "Progress",
                  data: validProgressData,
                  backgroundColor: mappedColors,
                  borderWidth: 1,
                },
              ],
            },
            options: {
              scales: {
                y: {
                  beginAtZero: true,
                  max: 100, // Fix vertical scale at 100
                  stepSize: 10, // Set interval to 10
                  title: {
                    display: true,
                    text: "Progress (%)", // Vertical axis label
                  },
                },
              },
              plugins: {
                tooltip: {
                  callbacks: {
                    // Custom tooltip for hover
                    label: function (tooltipItem) {
                      const progress = validProgressData[tooltipItem.dataIndex];
                      return `Progress: ${progress}%`;
                    },
                  },
                },
              },
            },
          });

          // Define static colors and initialize counts
          const colorCounts = {
            Green: 0,
            Yellow: 0,
            Red: 0,
          };

          // Count occurrences of each color
          validColors.forEach((color) => {
            if (colorCounts[color.trim()] !== undefined) {
              colorCounts[color.trim()] += 1;
            }
          });

          // Extract data for the chart
          const labels = Object.keys(colorCounts); // ["Green", "Yellow", "Red"]
          const counts = Object.values(colorCounts); // [3, 2, 1]
          const chartColors = ["#28a745", "#ffc107", "#dc3545"]; // Green for Healthy, Yellow for Caution, Red for In Trouble

          // Calculate percentages
          const total = counts.reduce((sum, count) => sum + count, 0);
          const percentages = counts.map((count) =>
            ((count / total) * 100).toFixed(1),
          ); // Percentages with 1 decimal point

          // Custom legend labels
          const customLabels = ["Healthy", "Caution", "In Trouble"];

          const chartData = [["Status", "Count"]];
          labels.forEach((label, index) => {
            chartData.push([customLabels[index], counts[index]]);
          });

          const data = google.visualization.arrayToDataTable(chartData);
          const options = {
            title: "Portfolio Health",
            pieHole: 0.4,
            backgroundColor: "transparent",
            width: "600px",
            colors: chartColors, // Set the colors for the pie chart
            legend: {
              position: "right",
              labels: {
                generateLabels: function (chart) {
                  return chartData
                    .map((row, index) => {
                      if (index === 0) return null; // Skip header row
                      return {
                        text: `${row[0]} (${percentages[index - 1]}%)`,
                        fillStyle: chartColors[index - 1], // Set the color for the label's box
                        strokeStyle: chartColors[index - 1],
                        lineWidth: 1,
                      };
                    })
                    .filter((label) => label !== null);
                },
                color: "#333", // Text color for legend
                font: {
                  size: 14, // Font size for legend
                },
              },
            },
            tooltip: {
              callbacks: {
                label: function (tooltipItem) {
                  const status = customLabels[tooltipItem.dataIndex];
                  const count = counts[tooltipItem.dataIndex];
                  return `${status}: ${count} project(s)`;
                },
              },
            },
          };
          const chart = new google.visualization.PieChart(
            document.getElementById("pieChart"),
          );
          chart.draw(data, options);
        } else {
          console.error("Expected an array but got:", progressData);
        }
      })
      .catch((err) => console.error(err));

    fetch(`/projects/radar/countProjectsByTag1`)
      .then((response) => response.json())
      .then((tagsData) => {
        if (
          tagsData.length === 0 ||
          tagsData.every((tag) => tag.tag_name === null)
        ) {
          document.getElementById("tag1NoTags").innerText =
            "No data found for tag 1";
          return;
        }

        const chartData = [["Tag 1", "Project Count"]];
        tagsData.forEach((tag) => {
          if (tag.tag_name !== null && parseInt(tag.project_count) > 0) {
            chartData.push([tag.tag_name, parseInt(tag.project_count)]);
          }
        });

        const data = google.visualization.arrayToDataTable(chartData);
        const options = {
          title: "Projects by Tag 1",
          pieHole: 0.4,
          backgroundColor: "transparent",
          width: "600px",
        };
        const chart = new google.visualization.PieChart(
          document.getElementById("tag1Chart"),
        );
        chart.draw(data, options);
      })
      .catch((err) => console.error(err));

    fetch(`/projects/radar/countProjectsByTag2`)
      .then((response) => response.json())
      .then((tagsData) => {
        if (
          tagsData.length === 0 ||
          tagsData.every((tag) => tag.tag_name === null)
        ) {
          document.getElementById("tag2NoTags").innerText =
            "No data found for tag 2";
          return;
        }

        const chartData = [["Tag 2", "Project Count"]];
        tagsData.forEach((tag) => {
          if (tag.tag_name !== null && parseInt(tag.project_count) > 0) {
            chartData.push([tag.tag_name, parseInt(tag.project_count)]);
          }
        });

        const data = google.visualization.arrayToDataTable(chartData);
        const options = {
          title: "Projects by Tag 2",
          pieHole: 0.4,
          backgroundColor: "transparent",
        };
        const chart = new google.visualization.PieChart(
          document.getElementById("tag2Chart"),
        );
        chart.draw(data, options);
      })
      .catch((err) => console.error(err));

    fetch(`/projects/radar/countProjectsByTag3`)
      .then((response) => response.json())
      .then((tagsData) => {
        if (
          tagsData.length === 0 ||
          tagsData.every((tag) => tag.tag_name === null)
        ) {
          document.getElementById("tag3NoTags").innerText =
            "No data found for tag 3";
          return;
        }

        const chartData = [["Tag 3", "Project Count"]];
        tagsData.forEach((tag) => {
          if (tag.tag_name !== null && parseInt(tag.project_count) > 0) {
            chartData.push([tag.tag_name, parseInt(tag.project_count)]);
          }
        });

        const data = google.visualization.arrayToDataTable(chartData);
        const options = {
          title: "Projects by Tag 3",
          pieHole: 0.4,
          backgroundColor: "transparent",
        };
        const chart = new google.visualization.PieChart(
          document.getElementById("tag3Chart"),
        );
        chart.draw(data, options);
      })
      .catch((err) => console.error(err));
  }
</script>
